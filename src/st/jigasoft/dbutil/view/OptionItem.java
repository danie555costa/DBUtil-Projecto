/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package st.jigasoft.dbutil.view;

import java.awt.Color;
import java.util.HashMap;
import java.util.Objects;
import javax.swing.Timer;

/**
 *
 * @author Servidor
 */
class OptionItem<T> extends javax.swing.JPanel implements ItemOption<T>
{
    private ItemSelection<T> onSelectionChange;
    private boolean seleted;
    private ItemClick onClick;
    private String key;
    private Color mousePointed;
    private Color backColor;
    private HashMap<String, T> mapValues;
    private T[] confirm;
    private HashMap<String, Object> mapObject;

    public OptionItem(ItemClick onClieck,String key, String name)
    {
        this.initComponents();
        this.init(onClieck, key, name);
        
    }
    /**
     * Creates new form OptionItem
     */
    public OptionItem(ItemClick onClick, String key) 
    {
        initComponents();
        this.init(onClick, key, key);
    }
    
    public void setTitle(String name)
    {
        this.title.setText(name);
    }
    
    
    @Override
    public void setToolTipText(String text) 
    {
        this.title.setToolTipText(text);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JPanel();
        title = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        title.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Option");

        javax.swing.GroupLayout backLayout = new javax.swing.GroupLayout(back);
        back.setLayout(backLayout);
        backLayout.setHorizontalGroup(
            backLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );
        backLayout.setVerticalGroup(
            backLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.onClick.click(this, this.isSeleted());
    }//GEN-LAST:event_formMousePressed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.pointed();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        this.setColor(backColor);
    }//GEN-LAST:event_formMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel back;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    void setColor(Color color)
    {
        this.setBackground(color);
        this.back.setBackground(color);
        this.title.setBackground(color);
        this.backColor = color;
    }

    void setColorTitle(Color color)
    {
        this.title.setForeground(color);
    }

    public ItemSelection<T> getOnSelectionChange() {
        return onSelectionChange;
    }

    public void setOnSelectionChange(ItemSelection<T>  onSelection)
    {
        this.onSelectionChange = onSelection;
    }

    public boolean isSeleted() {
        return seleted;
    }

    public void setSeleted(boolean seleted, String ... args) 
    {
        boolean aux = this.seleted;
        this.seleted = seleted;
        if(this.onSelectionChange != null && aux != seleted)
            this.onSelectionChange.selectionChange(!seleted, seleted);
    }

    /**
     * Obter a chave do item
     * @return 
     */
    @Override
    public String getKey() 
    {
        return this.key;
    }

    void setMousePointed(Color mousePointed) 
    {
        this.mousePointed = mousePointed;
    }
    
    public void pointed()
    {
        this.setBackground(this.mousePointed);
        this.back.setBackground(this.mousePointed);
        this.title.setBackground(this.mousePointed);
    }

  

  

    private void init(ItemClick onClieck, String key, String name) 
    {
        this.setTitle(name);
        this.mapValues = new HashMap<>();
        this.mapObject = new HashMap<>();
        this.onClick = onClieck;
        this.key = key;
        this.setSeleted(false);
    }

    @Override
    public boolean isSelected() 
    {
        return this.seleted;
    }

    @Override
    public void setValue(String name, T value) 
    {
        this.mapValues.put(key, value);
    }
    
    @Override
    public void setObject(String name, Object value) 
    {
        this.mapObject.put(name, value);
    }

    @Override
    public Object getObject(String name) 
    {
        return this.mapObject.get(name);
    }
    
    

    

   

    @Override
    public T getValue(String name)
    {
        return this.mapValues.get(key);
    }

    @Override
    public String getValue() 
    {
        return this.title.getText();
    }

    void setTemporaryBackgarund(final Color temporatyBackgraoud) 
    {
        
        setBackground(temporatyBackgraoud);
        Timer timer = new Timer(100, (o)->
        {
           OptionItem.this.setBackground(backColor);
        });
        timer.setRepeats(false);
        timer.start();
    }

    @Override
    public void setBackground(Color bg)
    {
        if(back != null)
            back.setBackground(bg);
        else super.setBackground(bg);
    }

    public Color getBackColor() 
    {
        return backColor;
    }

    @Override
    public Color getBackground() 
    {
        if(back != null) return back.getBackground();
        return super.getBackground();
    }
    
    
    
    
    
    
    
    

    
    
    public static interface ItemClick<T>
    {
        public void click(OptionItem <T> item, Boolean currentSelection);
    }
    
    public static interface ItemSelection<T>
    {
        public void selectionChange(boolean oldSelection, boolean newSelection, String ...agrs);
    }

    @Override
    public String toString()
    {
        return "OptionItem{" + "seleted=" + seleted + ", key=" + key + ", title=" + title.getText() + '}';
    }

    @Override
    public int hashCode() 
    {
        int hash = 7;
        hash = 37 * hash + (this.seleted ? 1 : 0);
        hash = 37 * hash + Objects.hashCode(this.key);
        hash = 37 * hash + Objects.hashCode(this.title);
        return hash;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass() || obj.getClass() != String.class)
        {
            return false;
        }
        
        if(obj instanceof String)
        {
            return (obj.toString().equals(this.key));
        }
        else
        {
            final OptionItem<?> other = (OptionItem<?>) obj;
            return Objects.equals(this.key, other.key);
        }
    }

    
    
}

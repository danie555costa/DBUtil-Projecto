/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package st.jigasoft.dbutil.view;

import st.jigasoft.dbutil.util.FilterableTableModel;
import st.jigasoft.dbutil.util.models.ItemTableModel;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javafx.scene.control.SelectionMode;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

/**
 *
 * @author Servidor
 */
public final class FiterableTable extends javax.swing.JPanel
{
    private boolean activeSorte;
    private boolean activeFilter;
    private boolean autoFilter;
    private Consumer<HashMap<String, Object>> onSelect;
    
    private FilterableTableModel model;
    private boolean searcher;
    private BiConsumer<HashMap<String, Object>, ItemTableModel> onDoubleClick; 
    
    public FiterableTable()
    {
        initComponents();
        this.activeSorte = true;
        this.autoFilter = true;
        this.activeFilter = true;
        this.searcher = true;
        this.table.setSelectionMode(SelectionMode.SINGLE.ordinal());
    }

    public JComboBox getComBoxColumn() {
        return null;
    }
    
    public JScrollPane getScrolTable() {
        return scrolTable;
    }

    public DUTable getTable() {
        return table;
    }

    public JTextField getTextKey() {
        return textKey;
    }

    public boolean isActiveSorte() {
        return activeSorte;
    }

    public void setActiveSorte(boolean activeSorte) {
        this.activeSorte = activeSorte;
    }

    public boolean isActiveFilter() {
        return activeFilter;
    }

    public void setActiveFilter(boolean activeFilter) {
        this.activeFilter = activeFilter;
    }

    public boolean isAutoFilter() {
        return autoFilter;
    }

    public void setAutoFilter(boolean autoFilter) {
        this.autoFilter = autoFilter;
    }

    public FilterableTableModel getModel() {
        return model;
    }

    public HashMap<String, Object> getMapSelection()
    {
        return this.model.getMapAt(this.table.getSelectedRow());
    }

    public JPanel getjPanel2() {
        return jPanel2;
    }

    
    
    /**
     * Setar o model na tabela
     * @param model 
     */
    public void setModel(FilterableTableModel model)
    {
        if(this.model == null)
        {
            this.table.setModelUtil(model);
            this.model = model;
            if(this.activeSorte)
               this.table.setRowSorter(model.getSorterTable());
            return;
        }
        this.textKey.setText("");
        model.setOldSelectd(this.getMapSelection(), this.table);
        this.table.setModelUtil(model);
        if(this.activeSorte)
            this.table.setRowSorter(model.getSorterTable());
        this.model.clear();
        this.model = model;
    }

  
    public ItemTableModel getSeletedItem ()
    {
        if(table == null || model == null) return null;
        int index = this.table.getSelectedRow();
        return this.model.getItemModel(index);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        scrolTable = new javax.swing.JScrollPane();
        table = new st.jigasoft.dbutil.view.DUTable();
        textKey = new st.jigasoft.dbutil.view.EditText();

        jLabel1.setText("jLabel1");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setRowHeight(25);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        scrolTable.setViewportView(table);

        textKey.setTextHint("Search...");
        textKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textKeyKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrolTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 73, Short.MAX_VALUE)
                .addComponent(textKey, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(scrolTable, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textKey, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void autoSearch() {
        if(activeFilter
                && autoFilter)
        {
            String text = textKey.getText();
            filter(text, -1);
        }
    }

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        onClick(evt);
    }//GEN-LAST:event_tableMouseClicked

    /**
     * Quando for clicado na linha
     * @param evt 
     */
    private void onClick(MouseEvent evt)
    {
        HashMap<String, Object> map = this.getMapSelection();
        if(onSelect != null && map !=  null)
                onSelect.accept(map);
        if(this.onDoubleClick != null && evt.getClickCount() == 2) 
            this.onDoubleClick.accept(this.getMapSelection(), this.getSeletedItem());
    }

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        this.tableMouseClicked(null);
    }//GEN-LAST:event_tableKeyReleased

    private void textKeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textKeyKeyReleased
        this.autoSearch();
    }//GEN-LAST:event_textKeyKeyReleased
    
    public void setAcionSelection (Consumer<HashMap<String, Object>> action)
    {
        this.onSelect = action;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JPanel jPanel2;
    protected javax.swing.JScrollPane scrolTable;
    protected st.jigasoft.dbutil.view.DUTable table;
    protected st.jigasoft.dbutil.view.EditText textKey;
    // End of variables declaration//GEN-END:variables

    
    private void filter(String text, int indexColumn)
    {
        if(this.model == null) return;
        this.model.setFilter(text);
        
    }

    public void clear()
    {
        this.textKey.setText(null);
        if(this.model != null)this.model.clear();
    }
    
    public void setSearcher (boolean searcher)
    {
        this.searcher = searcher;
        this.textKey.setVisible(searcher);
    }

    public boolean isSearcher() {
        return searcher;
    }

    @Override
    public void updateUI()
    {
        super.updateUI();
        try
        {
            this.table.updateUI();
            this.textKey.updateUI();
        }catch (Exception ex)
        {
            
        }
    }

    
    
    public void setTextFuter(String text)
    {
    }

    public JLabel getFutterBox()
    {
        return null;
    }

    /**
     * Remove a linha seleciodada da tabela
     * @return 
     */
    public ItemTableModel removeSelected()
    {
        int index = this.table.getSelectedRow();
        if(index == -1) return null;
        ItemTableModel resp = this.model.removeAt(index);
        this.table.updateUI();
        return resp;
    }

    public ArrayList<ItemTableModel> getListModels()
    {
        return this.model.getModelValues();
    }
    
    /**
     * Definir a acao no double click
     * @param action 
     */
    public void setOnDoubleClick(BiConsumer<HashMap<String, Object>, ItemTableModel> action)
    {
        this.onDoubleClick = action;
    }

    public boolean hasSeletedRow() 
    {
        return this.table.getSelectedRow() >= 0;
    }

    /**
     * Colocar a table selecionada em um dado item
     * @param item 
     */
    public void setSeletedItem(ItemTableModel item) 
    {
        int indexItem = this.model.getIndexOf(item);
        if(indexItem<0 && indexItem> this.model.getRowCount()) return;
        this.setSeletedIndex(indexItem);
        
    }
    
    /**
     * Selecionar um grupo de item da tabela
     * @param items 
     */
    public void setSeletedItems(ItemTableModel ... items) 
    {
        for(ItemTableModel item : items)
            setSeletedItem(item);
    }
    
    
    /**
     * Selecionar um grupo de index na tabela
     * @param indexs 
     */
    public void setSeletedIndex (int ... indexs)
    {
        for(int i: indexs) setSeletedIntervalIndex(i, i);
    }
    
    /**
     * Selecionar um intevalo de index na tabela
     * @param indexIni
     * @param indexFim 
     */
    public void setSeletedIntervalIndex (int indexIni, int indexFim)
    {
        if(indexIni >=0 && indexIni<this.model.getRowCount()
                && indexIni>=0 && indexFim <this.model.getRowCount()
                && indexIni <= indexFim)
        this.table.setRowSelectionInterval(indexIni, indexFim);
    }

    public void removeAllItems() 
    {
        if(this.model != null)
            this.model.removeAll();
    }
}
